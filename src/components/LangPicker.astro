---
import { Icon } from "astro-icon/components";



export interface Props {
  currentLang: string;
  pathName: string;
  languages: {
    nativeName: string;
    link: string;
  }[];
}

const { currentLang, pathName, languages } = Astro.props;
console.log(currentLang, "currentLang", pathName);

// const currentLanguage =
//   languages.find((lang) => lang.link === `/${currentLang}`)?.nativeName ||
//   "Language";
---

<div class="language-picker">
  <button
    id="language-toggle"
    class="flex items-center py-3 px-4 rounded hover:text-dark dark:hover:text-darkmode-dark"
    aria-expanded="false"
    aria-controls="language-menu"
  >
    <Icon
      name="tabler:language-katakana"
      class="w-6 h-6 md:w-5 md:h-5 md:inline-block mr-2"
    />
    <!-- <span>{currentLanguage}</span> -->
    <Icon
      name="tabler:chevron-down"
      class="w-3.5 h-3.5 ml-0.5 hidden md:inline"
    />
  </button>
  <ul
    id="language-menu"
    class="hidden dropdown-menu md:backdrop-blur-md dark:md:bg-dark rounded md:absolute pl-4 md:pl-0 md:hidden font-medium md:bg-white/90 md:min-w-[200px] drop-shadow-xl"
    role="menu"
  >
    {
      languages.map(({ nativeName, link }) => {

        return (
          <li role="menuitem">
            <a
              class={`first:rounded-t last:rounded-b py-2 px-5 block whitespace-no-wrap hover:text-dark dark:hover:text-darkmode-dark md:hover:bg-gray-100 dark:hover:bg-gray-800 ${
                link === `/${currentLang}` ? "aw-link-active" : ""
              }`}
              href={link}
            >
              {nativeName}
            </a>
          </li>
        );
      })
    }
  </ul>
</div>
<!-- 
<script>
  function setupLanguagePicker() {
    const toggleButton = document.getElementById("language-toggle");
    const menu = document.getElementById("language-menu");

    if (toggleButton && menu) {
      toggleButton.addEventListener("click", () => {
        const expanded =
          toggleButton.getAttribute("aria-expanded") === "true" || false;
        toggleButton.setAttribute("aria-expanded", (!expanded).toString());
        menu.classList.toggle("hidden");
      });

      // Close the menu when clicking outside
      document.addEventListener("click", (event) => {
        if (
          !toggleButton.contains(event.target as Node) &&
          !menu.contains(event.target as Node)
        ) {
          menu.classList.add("hidden");
          toggleButton.setAttribute("aria-expanded", "false");
        }
      });

      // Handle keyboard navigation
      menu.addEventListener("keydown", (event) => {
        if (event.key === "Escape") {
          menu.classList.add("hidden");
          toggleButton.setAttribute("aria-expanded", "false");
          toggleButton.focus();
        }
      });
    }
  }

  // Run the setup function when the DOM is fully loaded
  document.addEventListener("DOMContentLoaded", setupLanguagePicker);

  // If you're using this in a dynamically loaded component, you might also want to run it on astro:page-load
  document.addEventListener("astro:page-load", setupLanguagePicker);
</script> -->
